# -*- coding: utf-8 -*-
"""Indian_cars_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ym0SZxYSf7u44d5XiM67lnuVwrh3YrKh
"""

#importing libraries

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read the file

cars=pd.read_csv("/content/cars_ds_final.csv")

#Read the first five rows of the data

cars.head()

#Delete the column named "Unnamed: 0"

del cars['Unnamed: 0']

#Get the information of the data

cars.info()

"""#Attribute Analysis

#####Observe and analyze each Attribute of the given dataset.
1.We observe that
#####'''make,model,ExShowroom_price,displacement,cylinders,Valves_Per_Cylinder,Fuel_Tank_Capacity,Fuel_Type,Body_Type,City_Mileage,Highway_Mileage,TypeCity_Mileage,Basic_Warranty,Seating_Capacity,Child_Safety_Locks,Low_Fuel_Warning,Ventilation_System,Number_of_Airbags,Average_Speed,Engine_Type,Navigation_System''' are the attributes that affect our Analysis.


2.Obtained the dataset "cars_data" with the above attributes and observed the Information of the dataset.
"""

#Check Number of values in each and every column

cars['Voice_Recognition'].value_counts()

# List all the columns and analyze each column ---[Number of values,type of the column, Usefulness of the column]

column_names=cars.columns.tolist()
column_names

# Analyze each column--[Meaning, used for Analysis or not] and extract the columns found useful for the analysis.
'''make,model,Ex-Showroom_price,displacement,cylinders,Valves_Per_Cylinder,Fuel_Tank_Capacity,Fuel_Type,Body_Type,City_Mileage,Highway_Mileage,Type
City_Mileage,Basic_Warranty,Seating_Capacity,Child_Safety_Locks,Low_Fuel_Warning,Ventilation_System,Number_of_Airbags,Average_Speed,Engine_Type
Navigation_System'''

#make,model,Ex-Showroom_price,displacement,cylinders,Valves_Per_Cylinder,Fuel_Tank_Capacity,Fuel_Type,Body_Type,City_Mileage,Highway_Mileage,Type
#City_Mileage,Basic_Warranty,Seating_Capacity,Child_Safety_Locks,Low_Fuel_Warning,Ventilation_System,Number_of_Airbags,Average_Speed,Engine_Type
#Navigation_System,

# Create a new dataset for the columns extracted from the data set above

cars_data=cars[['Make','Model','Ex-Showroom_Price','Displacement','Cylinders','Valves_Per_Cylinder','Fuel_Tank_Capacity','Fuel_Type','Body_Type','City_Mileage','Highway_Mileage','Type','Basic_Warranty','Seating_Capacity','Child_Safety_Locks','Low_Fuel_Warning','Ventilation_System','Number_of_Airbags','Average_Speed','Engine_Type','Navigation_System']]

# Display the information of the dataset

cars_data.info()

"""#Make Column

1.Make Column represents The Company of the Car.

2.There are Null values in the Make Column.

3.we doesnt need the data where company name is not given-- So we will drop the rows where Make column is null.

4.The shape of the data----(1201,21)

"""

#Check for Null values

cars_data.Make.isnull().sum()

#Drop the rows

cars_data=cars_data.dropna(subset=['Make'])

cars_data.shape

"""#Ex-Showroom_Price Column

1.There is inconsistency in the Price Column So we will replace ',' with '' and 'Rs. ' with ''.

2.The Price values are changed into 'Integer' values.

3.RS.2,34,678----234678
"""

#Replace ',' with ''

cars_data['Ex-Showroom_Price']=cars_data['Ex-Showroom_Price'].str.replace(',','')

#Replace 'Rs. ' with ''

cars_data['Ex-Showroom_Price']=cars_data['Ex-Showroom_Price'].str.replace('Rs. ','')

#Convert the column to Integer type

cars_data['Ex-Showroom_Price']=cars_data['Ex-Showroom_Price'].astype(int)

"""#Displacement Column

1.There is inconsistency in 'Displacement' column.

2.Replace 'cc ' with '' and convert the data type to 'Integer'.

3.240 cc----240
"""

#Replace ' cc' with ''

cars_data['Displacement']=cars_data['Displacement'].str.replace(' cc','')

#Check for null values

cars_data['Displacement'].isnull().sum()

#For null values fill it with zero

cars_data['Displacement']=cars_data['Displacement'].fillna('0')

#Convert the column into Integer type

cars_data['Displacement']=cars_data['Displacement'].astype(int)

"""#Cylinders Column

1.Check for the Null values in the Cylinders column.

2.Drop the rows where null Cylinder values are Null and convert the column to 'Integer'.

3.Shape of the data--(1135, 21)


"""

#Check for null values

cars_data['Cylinders'].isnull().sum()

#Replace null values with the median of the column

cars_data['Cylinders']=cars_data['Cylinders'].fillna(cars_data['Cylinders'].median())

#Convert the column into Integer datatype

cars_data['Cylinders']=cars_data['Cylinders'].astype(int)

cars_data.shape

# Drop the column 'Valves_Per_Cylinder' ---no difference in analysis is shown.

del cars_data['Valves_Per_Cylinder']

"""#Fuel_Tank_Capacity Column

1.There are Null values--53 and strip the word 'litres' from the column.

2.Fill the null values with the median of the 'Fuel_Tank_Capacity' Column.

3.Convert the data type of the column to "Float".
"""

#Check for null values

cars_data['Fuel_Tank_Capacity'].isnull().sum()

#strip the word 'litres' from the column

cars_data['Fuel_Tank_Capacity']=cars_data['Fuel_Tank_Capacity'].str.strip('litres')

#Fill the null values with the median of the column

cars_data['Fuel_Tank_Capacity'] = cars_data['Fuel_Tank_Capacity'].fillna(cars_data['Fuel_Tank_Capacity'].median())

#Convert the column into Float datatype.

cars_data['Fuel_Tank_Capacity']=cars_data['Fuel_Tank_Capacity'].astype(float)

# Display the Information of the 'Fuel_tank_Capacity' column.

cars_data['Fuel_Tank_Capacity'].info()

#Display the Information of the cars_data

cars_data.info()

"""#Fuel_Type Column

1.Fuel_Type doesn't contain Null values and there are five different types of values.
"""

#Display different values in the column

cars_data['Fuel_Type'].value_counts()

#check for null values

cars_data['Fuel_Type'].isnull().sum()

#display the first five rows of the data

cars_data.head(5)

"""#Body_Type Column

1.There are three null values and drop the columns where Body type of the car is not given.
"""

#Check for null values

cars_data['Body_Type'].isnull().sum()

#Display different values in the column

cars_data['Body_Type'].value_counts()

#Drop the rows where the column value is null

cars_data=cars_data.dropna(subset=['Body_Type'])

"""#City_Mileage Column
1.There are inconsistencies in the 'City Mileage' column, Strip 'km/litre','?' in the 'City_Mileage; column.

2.Replace ',' with '' and display all the unique values in City_Mileage.

3.There is a value 12.5-12.7 replace this with 12.6 as the average value is taken.

4.Convert the data type of the column into Integer. Fill the null values with the mean of the 'City_Mileage' Column.
"""

#strip the word 'kmlitre' from the column

cars_data['City_Mileage']=cars_data['City_Mileage'].str.strip('km/litre')

#strip the symbol '?' from the column

cars_data['City_Mileage']=cars_data['City_Mileage'].str.strip('?')

#Display the values in the column

cars_data['City_Mileage'].value_counts()

#Replace ',' with ''

cars_data['City_Mileage']=cars_data['City_Mileage'].str.replace(',','')

#check all unique values of the column

cars_data['City_Mileage'].unique()

#replace 12.5-12.7 with 12.6

cars_data['City_Mileage']=cars_data['City_Mileage'].str.replace('12.5-12.7','12.6')

#Convert the datatype of the column into the float

cars_data['City_Mileage']=cars_data['City_Mileage'].astype(float)

#Fill the null values with th emean of the column

cars_data['City_Mileage']=cars_data['City_Mileage'].fillna(cars_data['City_Mileage'].mean())

#Convert the column into Integer data type

cars_data['City_Mileage']=cars_data['City_Mileage'].astype(int)

#Drop the column Highway_Mileage

del cars_data['Highway_Mileage']

"""#Type Column

1.Type column doesn't have any null values or inconsistencies.
"""

#check for null values

cars_data['Type'].isnull().sum()

"""# Basic_Warranty Column

1.Split the column and take only years that is number from the column.

2.Check for null values and fill them with the median of the 'Basic_Warranty' and convert the datatype to 'Integer'.
"""

#Split the  value to take only number of years from the data

cars_data['Basic_Warranty']=cars_data['Basic_Warranty'].str.split().str[0]

#check for null values

cars_data['Basic_Warranty'].isnull().sum()

#Replace null values with median of the column

cars_data['Basic_Warranty']=cars_data['Basic_Warranty'].fillna(cars_data['Basic_Warranty'].median())

#Convvert the column into Integer data type

cars_data['Basic_Warranty']=cars_data['Basic_Warranty'].astype(int)

"""#Seating_Capacity Column

1. Check for Null values and replace them withthe median of the 'Seating_Capacity'.
"""

#check for null values

cars_data['Seating_Capacity'].isnull().sum()

#fill the null values with the median of the column

cars_data['Seating_Capacity']=cars_data['Seating_Capacity'].fillna(cars_data['Seating_Capacity'].median())

"""#Child_Safety_Locks Column

1.Check for null value and observe the values in the column.

2.There are null values in the place of 'No'. So. replace the null values with 'No'.

3.Convert the datatype of the 'Child_Safety_Locks' to Boolean.
"""

#check for null values

cars_data['Child_Safety_Locks'].isnull().sum()

#fill the null values with 'no'

cars_data['Child_Safety_Locks']=cars_data['Child_Safety_Locks'].fillna('No')

#convert the column to boolean data type.

cars_data['Child_Safety_Locks'].astype(bool)

"""# Low_Fuel_Warning Column

1.Check for null value and observe the values in the column.

2.There are null values in the place of 'No'. So. replace the null values with 'No'.

3.Convert the datatype of the 'Low_Fuel_Warning' to Boolean.


"""

#Fill the null values with 'No'

cars_data['Low_Fuel_Warning']=cars_data['Low_Fuel_Warning'].fillna('No')

"""# Ventilation_System  Column

1.Drop the column 'Ventilation Sysytem' from the data.
"""

#delete ventilation system from the data

del cars_data['Ventilation_System']

"""#Number_of_Airbags column

1. check for null values and replace them with the mean of the 'Number_of_Airbags' and convert the datatype to 'Integer'.
"""

#check for null values

cars_data['Number_of_Airbags'].isnull().sum()

#Display unique values in the data

cars_data['Number_of_Airbags'].unique()

#Fill the null values with the mean of the column

cars_data['Number_of_Airbags']=cars_data['Number_of_Airbags'].fillna(cars_data['Number_of_Airbags'].mean())

#convert the column into Integer data type

cars_data['Number_of_Airbags']=cars_data['Number_of_Airbags'].astype(int)

"""# Average_Speed Column

1.Check for null value and observe the values in the column.

2.There are null values in the place of 'No'. So. replace the null values with 'No'.

3.Convert the datatype of the 'Average_Speed' to Boolean.
"""

#Display the unique values of the column

cars_data['Average_Speed'].unique()

#Fill the null values of the column with 'No'

cars_data['Average_Speed']=cars_data['Average_Speed'].fillna('No')

#Check for null values

cars_data['Average_Speed'].isnull().sum()

#convert the column into boolean datatype

cars_data['Average_Speed']=cars_data['Average_Speed'].astype(bool)

"""# Engine_type Column

1.Check for null value and observe the values in the column.

2.There are null values in the place of 'No'. So. replace the null values with 'No'.

3.Convert the datatype of the 'Engine_Type' to Boolean.
"""

#Replace null values with 'No'

cars_data['Engine_Type']=cars_data['Engine_Type'].fillna('No')

#check for null values-if any there

cars_data['Engine_Type'].isnull().sum()

#cinvert the column into boolean data type

cars_data['Engine_Type']=cars_data['Engine_Type'].astype(bool)

"""# Navigation_System Column

1.Check for null value and observe the values in the column.

2.There are null values in the place of 'No'. So. replace the null values with 'No'.

3.Convert the datatype of the 'Navigation_System' to Boolean.
"""

#check for null values

cars_data['Navigation_System'].isnull().sum()

#fill null values with 'No'

cars_data['Navigation_System']=cars_data['Navigation_System'].fillna("No")

#convert the column into boolean data type

cars_data['Navigation_System']=cars_data['Navigation_System'].astype(bool)

"""#Cleaned Cars Data Information"""

# Display the information of the dataset--cars_data

cars_data.info()

#Display first five rows of the data.

cars_data.head()

# check for null values

cars_data.isnull().sum()

# Get the description of the numeric columns in the cars_data column.

cars_data.describe()

"""#Outlier Analysis

1.Remove the outliers from the data using the formula mean+3* standard deviation and mean-3* standard deviation

2.The columns where the outliers are observed and removed are 'Ex-Showroom_Price', 'Displacement', 'Fuel_Tank_Capacity', 'City_mileage'.
"""

#outliers of the 'Ex-Showroom_Price' column

Price_UL = round(cars_data['Ex-Showroom_Price'].mean() + 3 * cars_data['Ex-Showroom_Price'].std(),3)
Price_LL = round(cars_data['Ex-Showroom_Price'].mean() - 3 * cars_data['Ex-Showroom_Price'].std(),3)
cars_data = cars_data[(cars_data['Ex-Showroom_Price']> Price_LL) & (cars_data['Ex-Showroom_Price'] < Price_UL)]
cars_data.shape

#outliers of the 'Displacement' column

Disp_UL = round(cars_data['Displacement'].mean() + 3 * cars_data['Displacement'].std(),3)
Disp_LL = round(cars_data['Displacement'].mean() - 3 * cars_data['Displacement'].std(),3)
cars_data = cars_data[(cars_data['Displacement']> Disp_LL) & (cars_data['Displacement'] <Disp_UL)]
cars_data.shape

#outliers of the 'Fuel_Tank_Capacity' column

Fuel_UL = round(cars_data['Fuel_Tank_Capacity'].mean() + 3 * cars_data['Fuel_Tank_Capacity'].std(),3)
Fuel_LL = round(cars_data['Fuel_Tank_Capacity'].mean() - 3 * cars_data['Fuel_Tank_Capacity'].std(),3)
cars_data = cars_data[(cars_data['Fuel_Tank_Capacity']> Fuel_LL) & (cars_data['Fuel_Tank_Capacity'] <Fuel_UL)]
cars_data.shape

#outliers of the 'City_Mileage' column

Mileage_UL = round(cars_data['City_Mileage'].mean() + 3 * cars_data['City_Mileage'].std(),3)
Mileage_LL = round(cars_data['City_Mileage'].mean() - 3 * cars_data['City_Mileage'].std(),3)
cars_data = cars_data[(cars_data['City_Mileage']> Mileage_LL) & (cars_data['City_Mileage'] <Mileage_UL)]
cars_data.shape

"""#Visualizations-Univariate Analysis

Univariate Analysis-- Analysis of one variable--
Univariate analysis is a statistical method used to analyze and describe the distribution, central tendency, and variability of a single variable at a time.

####Histograms

>1.Ex-Showroom_Price--- Positively Skewed

>2.Fuel Tank Capacity--- Positively Skewed

>3.Displacement--- Positively Skewed

>4.City Mileage--- Positively Skewed

>4.Number Of Airbags--- Positively Skewed

>*In a positively skewed distribution:*

>*The bulk of the values (highest frequencies) are on the left side.The tail on the right side is longer, indicating the presence of relatively few larger values.*

####Box plots
>1.Statistical Information[min.max.median,1st quartile,rd quartile] are observed.

####Count plots

>There are maximum number of vehicles from the company "Maruti Suzuki" and with "SUV" body type.

##Histograms
####Ex-Showroom_Price
>1.Ex-Showroom Price is distributed along x-axis.

>2.The distribution is maximum at price below 5 lakhs[0 to 0.5].
####Fuel Tank Capacity
>1.The Fuel tank capacity is distributed along x-axis.

>2.The distribution is maximum at 40-50 range of fuel tank capacity.

####Displacement
>1.The Displacement of vehicle is distributed along x-axis.

>2.The distribution is maximum at 1000-1500 range of Displacement.

####City Mileage

>1.City Mileage of the vehicle is distributed along x-axis.

>2.The distribution is maximum in the range of 0-500.
####Number of Airbags
>1. Number of Airbags is distribute along x-axis.

>2.There are maximum vehicles with 2-4 Airbags in the vehicle.
"""

# Histogram plot for 'Ex-Showroom_Price'

sns.histplot(data=cars_data,x="Ex-Showroom_Price",kde=True)
plt.title("Histogram for Showroom Price")
plt.xlabel("Price")
plt.show()

# Histogram plot for 'Fuel_Tank_Capacity'


sns.histplot(data=cars_data,x="Fuel_Tank_Capacity",kde=True)
plt.title("Histogram for Fuel Tank Capacity")
plt.xlabel("Fuel_Tank_Capacity")
plt.show()

#Histogram for Displacement column

sns.histplot(data=cars_data,x="Displacement",kde=True)
plt.title("Histogram for Displacement")
plt.xlabel("Displacement")
plt.show()

#Histogram for City_Mileage column

sns.histplot(data=cars_data,x="City_Mileage",kde=True)
plt.title("Histogram for City Mileage")
plt.xlabel("City_Mileage")
plt.show()

#Histogram for Number_of_Airbags column

sns.histplot(data=cars_data,x="Number_of_Airbags",kde=True)
plt.title("Histogram for Number of Airbags")
plt.xlabel("Number_of_Airbags")
plt.show()

"""##Box Plots

####Ex-Showroom_Price
>1.There are maximum number of price values which are out of the whisker named mainly as Outliers.

>2.The distribution show that there are more cars having less price that is below 5 lakhs are more than th ecars with higher prices.

####Number of Airbags
>This column have only one outlier which has 14 Airbags in the vehicle.

####City Mileage

>The mileage of the major number of cars is less and there are fewer cars with high mileage and they are considered as outliers for the give data.

####Type
>1. The types-Manual and automatic have outliers and there are cars with no child safety locks.
>2.Remaining cars are having no outliers and have child safety locks.
"""

#box plot for Ex-Showroom_Price

sns.boxplot(x=cars_data["Ex-Showroom_Price"])
plt.title("Statistical Information of Price")
plt.xlabel("Price")

#box plot for Number_of_Airbags

sns.boxplot(y=cars_data["Number_of_Airbags"])
plt.title("Statistical Information of Number of Airbags")
plt.xlabel("Number of Airbags")

#box plot for Number_of_Airbags

sns.boxplot(y=cars_data["City_Mileage"])
plt.title("Statistical Information of City Mileage")
plt.xlabel("City Mileage")

#box plot for Type


sns.boxplot(data=cars_data, x="Type", y="City_Mileage", hue="Child_Safety_Locks")
plt.title("Type vs City Mileage")

"""##Count Plots

1.There are more number of cars of the company--Maruti suzuki,Hyundai and Mahindra.

2.There are more vehicles with SUV Body type.
"""

#count plot for company names of the cars

plt.figure(figsize=(26,8))

sns.countplot(cars_data, x="Make")
plt.title("Car Makers")
plt.ylabel("Count")
plt.xlabel("Maker")
plt.xticks(rotation=30)
plt.show()

#plot for Body Type
plt.figure(figsize=(26,8))

sns.countplot(cars_data, x="Body_Type")
plt.title("Car Body Types")
plt.ylabel("Count")
plt.xlabel("Body Type")
plt.xticks(rotation=30)
plt.show()

"""#Bivariate Analysis

Bivariate analysis involves the simultaneous analysis of two variables to explore the relationships between them. The primary goal is to understand how changes in one variable relate to changes in another variable.

##Correlation Matrix

1.There is a strong relation between Price -- Cylinders and displacement.

2.There is a strong correlation between Displacement and Fuel Tank Capacity.

3.Seating capacity is somewhat correlated with Displacement.

4.Cylinders is related with Price.

5.Displacement is correlated with Number of Airbags.

6.There is no positive correlation for warranty.
"""

#correlation of numeric column

correlation=cars_data[['Make','Ex-Showroom_Price','Displacement','Cylinders','Fuel_Tank_Capacity','City_Mileage','Basic_Warranty','Seating_Capacity','Number_of_Airbags']]

#display the correlation matrix

correlation.corr()

"""##HeatMap

1.Ex-Showroom_Price,Displacement,Cylinders and Fuel Tank capacity have strong correlations with one another.
"""

sns.heatmap(correlation.corr(),annot=True,fmt=".1f",linewidth=.5,cmap="crest")
plt.title("Heat Map for Correlation")

"""##Scatter Plots

1.Maximum number of cars are running with Petrol.

2.Major Audi cars run with petrol.

3.there is only 'Maruti Suzuki R' that runs with CNG.

4.There are more hybrid cars in 'Lexus'.

5.'Skoda' cars runs using Diesel.

6.There are very less number of cars that runsusing CNG.

7.More number of cylinders are used in Petrol based Cars.

8.Petrol based cars are having highest displacement and after diesel based cars.
"""

#Scatter plot for make and Ex-Showrrom_Price

plt.figure(figsize=(26,8))
sns.scatterplot(cars_data,x='Make',y='Ex-Showroom_Price',hue='Fuel_Type')
plt.title('scatter plot Make Vs price')
plt.xlabel('Maker')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

#Scatter plot for Fuel_type and ex-Showroom_Price

sns.scatterplot(cars_data,x='Fuel_Type',y='Ex-Showroom_Price',hue='Fuel_Type')
plt.title('scatter plot Fuel_Type Vs price')
plt.xlabel('Fuel Type')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

#Scatter plot for Cylinders and Ex-Showroom_Price

sns.scatterplot(cars_data,x='Cylinders',y='Ex-Showroom_Price',hue='Fuel_Type')
plt.title('scatter plot Cylinders Vs price')
plt.xlabel('Cylinders')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

#Scatter plot for Displacement and Ex-Showroom_Price

plt.figure(figsize=(26,8))
sns.scatterplot(cars_data,x='Displacement',y='Ex-Showroom_Price',hue='Fuel_Type')
plt.title('scatter plot Displacement Vs price')
plt.xlabel('Displacement')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.show()

"""##Pair Plots

1.Most cars with less Mileage are having more Airbags.

2.Most cars with varying Displacements having 4 cylinders.

3.There are less Mileage cars with varying displacement.

4.Number of Airbags are varying with constant number of cylinders.
"""

#Pair plot for the columns--'Displacement','Cylinders','Number_of_Airbags','City_Mileage'

cars_data1=cars_data[['Displacement','Cylinders','Number_of_Airbags','City_Mileage']]
sns.pairplot(cars_data1, diag_kind="hist")
plt.title("'Displacement','Cylinders','Number_of_Airbags','City_Mileage'")

"""##Bar Charts

1.The price of Hybrid car is more than other types of cars.

2.The price of CNG based cars is lower than other types of cars.

3.High price cars are having no child safety locks but low price cars are having child safety locks.

4.Hybrid cars are having Navigation system.

5.There are petrol based cars with Navigation System.
"""

#Bar plot for Fuel type and Ex-Showroom_Price

sns.barplot(cars_data, x="Fuel_Type", y="Ex-Showroom_Price")
plt.xlabel("Type of Fuel")
plt.ylabel("Price")
plt.title("Bar chart for Fuel Type and Price")

#Bar Plot for Child Safety Locks and Ex-Showroom_Price
sns.barplot(cars_data, x="Child_Safety_Locks", y="Ex-Showroom_Price")
plt.xlabel("Child_Safety_Locks")
plt.ylabel("Price")
plt.title("Child_Safety_Locks")

#Bar plot for Navigation System and Number_of_Airbags

sns.barplot(cars_data, x="Navigation_System", y="Number_of_Airbags",hue='Fuel_Type')
plt.xlabel("Navigation_System")
plt.ylabel("Number of Airbags")
plt.title("Navigation_System Vs Number_of_Airbags")

"""##Joint Plots

1.There is a little relation between price and cylinders and the distributions are positively skewed that is higher prices and more cylinder having cars are lesser than the alternative.

2.There are cars with less number of cylinders and displacement are more.
"""

#Joint plot for cylinders and Ex-Showrooom_Price

sns.jointplot(data=cars_data, x="Ex-Showroom_Price", y="Cylinders", kind="reg")
plt.xlabel("Price")

#Joint plot for Displacement and Cylinders

sns.jointplot(data=cars_data,x='Displacement',y='Cylinders',kind='kde')

"""##Categorical Plot

1.There are more number of petrol cars as compared with Diesel,CNG and Hybrid cars.

2.There are very less number of cars with SUV,crossover and sports,Hatchback etc.
"""

#Categorical plot for Fuel type and Body Type


sns.catplot(data=cars_data,x='Fuel_Type',y='Body_Type',color='Green')
plt.title("Fuel_Type vs Body_Type")

"""##Violin Plots

1.There are Cars with 4 cylinders more and after that 3 cylinders.

2.There are less displacement cars more than the other range of cars.

3.There are hybrid cars with 4 cylinders more.

4.Diesel cars are 4 cylinders more after that 2,6 for this type.
"""

#Violin plot for Cylinders

sns.violinplot(x=cars_data["Cylinders"])
plt.title("cylinders variation")

#Violin plot for Displacement

sns.violinplot(x=cars_data["Displacement"])
plt.title("Displacement Variation")

#Violin plot for Fuel type and Cylinders

sns.violinplot(x=cars_data["Fuel_Type"],y=cars_data['Cylinders'])
plt.title('Fuel_Type vs Cylinders')

"""##Line Plot

1.Hybrid cars are having child safety locks and petrol based are having child safety locks in less number.
"""

#Line plot for Ex-Showrrom_Price and Fuel_Type via Child_Safety_Locks

sns.lineplot(data=cars_data,y='Ex-Showroom_Price',x='Fuel_Type',hue='Child_Safety_Locks')
plt.title('Fuel_Type vs Ex-Showroom_Price')