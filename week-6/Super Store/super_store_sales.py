# -*- coding: utf-8 -*-
"""super-store_sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvdiLlF4becm0h5I31NC0F5TUHMEKLwf
"""

#import libraries

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read the dataset

super_store=pd.read_csv("/content/train.csv")

#Display first five rows of the data.

super_store.head()

#check for duplicates.

super_store.duplicated().any()

#display the shape of the data

super_store.shape

"""#Attribute Analysis

1.Delete Row ID, Order ID columns, Customer Names.

2.Check for null values--Postal Code have Null values but our analysis doesn't need Postal code. Drop the postal code.

3.Convert Order Date and Ship Date into datetime datatype for consistency in the data.


"""

#delete Row ID

del super_store['Row ID']

#delete Order ID

del super_store['Order ID']

#Disply the umber of categories of the procucts

super_store['Category'].unique()

#Delete Customer names

del super_store['Customer Name']

#Display te dates

super_store['Ship Date'].value_counts()

# check number of ship modes are there

super_store['Ship Mode'].unique()

#check for null values

super_store.isnull().sum()

#delete postal code

del super_store['Postal Code']

#Display the number of unique values in the data.

super_store['Product Name'].nunique()

#Convert order date to datetime data type

super_store['Order Date'] = pd.to_datetime(super_store['Order Date'])

#Convert order date to datetime data type


super_store['Ship Date'] = pd.to_datetime(super_store['Ship Date'])

#check the data after removing inconsistencies

super_store.head()

#create a new column named 'Order_year' from Order Date

super_store['Order_Year']=super_store['Order Date'].dt.year

#create a new column named 'Ship_year' from Ship Date

super_store['Ship_Year']=super_store['Ship Date'].dt.year

# Display the information of the data.

super_store.info()

"""#Statistical Description

Display the mean,standard deviation,minimum,maximum values and quartiles of the numerical column in the data.
"""

#description of Sales column

super_store.describe()

super_store.shape

"""#Outliers

Remove outliers from the data using Sales column using---mean+3*standard deviation and mean-38standard deviation.
"""

#Outlier Analysis
sales_UL = round(super_store.Sales.mean() + 3 * super_store.Sales.std(),3)
sales_LL = round(super_store.Sales.mean() - 3 * super_store.Sales.std(),3)
super_store = super_store[(super_store.Sales > sales_LL) & (super_store.Sales < sales_UL)]
super_store.shape

"""#Visulaizations

#Univariate Analysis

Univariate Analysis---
Univariate analysis is a statistical method used to analyze a single variable or a single feature at a time. It involves examining the distribution and characteristics of that variable.

##Histogram

####Sales

1.Sales is distributed along x-axis.

2.There are more sales with less price.

####Order_Year

1.There are more number of orders in 2017-2018.

2.Number of orders are constantly increasing from year to year.
"""

#histogram for Sales

sns.histplot(data=super_store,x='Sales',kde=True)
plt.title("Sales Distribution")

#Histogram for Order Year

plt.hist(super_store['Order_Year'], bins=range(min(super_store['Order_Year']), max(super_store['Order_Year']) + 1), edgecolor='black', align='left')
plt.xlabel('Year')
plt.ylabel('Frequency')
plt.title('Histogram of Years in Datetime Series')
plt.show()

"""##DateTime Plot

1.'Technology' category product sales are incresing from year to year.

2.There are maximum 'Furniture' sales in 2018.

3.'Office supplies' category product sales are constant from years.There is no max and min crossed over the years.

4.There is always upa and downs between Furniture and Technology sales.

5.As the Shipping Date increases the sales are decreased in the year 2018.

6.There is no shipping for First Class and Same day after 2018 in sales.


"""

# Datetime plot for order Date

plt.figure(figsize=(26,8))
sns.lineplot(x = "Order Date", y = "Sales",
             data = super_store,hue="Category")
plt.title("Order Date wise Sales")

#Datetime plot for Order Year

plt.figure(figsize=(26,8))
sns.lineplot(x = "Order_Year", y = "Sales",
             data = super_store,hue="Category")
plt.title("Orde Year wise Sales")

#Datetime plot for Ship Date

plt.figure(figsize=(26,8))
sns.lineplot(x = 'Ship Date', y = "Sales",
            data=super_store )
plt.title("Ship Date wise Sales")

#Datetime plot for Ship Year

plt.figure(figsize=(26,8))
sns.lineplot(x = 'Ship_Year', y = "Sales",hue='Ship Mode' ,
            data=super_store )
plt.title("Ship year wise sales")

"""##Line Plots

1.There are more sales in 'West' region.

2.There are more sales in 'North Dakota Wyoming' state.

3.There are less sales in Columbia.

"""

#Line plot for region and Sales

plt.figure(figsize=(26,8))
sns.lineplot(x = 'Region', y = "Sales",
            data=super_store )
plt.title("Region wise Sales")

#Line plot for state and sales

plt.figure(figsize=(26,10))
plt.figure(figsize=(26,8))
sns.lineplot(x = 'State', y = "Sales",
            data=super_store )
plt.xlabel("State")
plt.ylabel("Sales")
plt.title("State Vs Sales")
plt.xticks(rotation=45)
plt.show()

"""##Box Plot

1.There are outliers in the sales.

2.The product with less sales price are having more distribution.

3.There are more number of 'Home Office' sales in 'Central' region.

4.There are more 'Corporate' sales in 'East' and 'West' Region.

5.There are more Consumer sales in 'South'.
"""

#Box plot for sales

sns.boxplot(x=super_store["Sales"])
plt.title("Statistical Information of Sales")
plt.xlabel("Sales")

#Box plot for Region, Sales for each Segment

sns.boxplot(y=super_store["Sales"],x=super_store['Region'],hue=super_store['Segment'])
plt.title("Region Vs Sales ")
plt.xlabel("Sales")

"""##Distribution Plots

1.The sales distribution is varying from high to low and it is positively skewed.

2.'Copiers' haave more sales in 'Technology' Category.

3.The furniture Category has more profit comapred to other Categories.

4.Sales are getting increased from month to month['November']--quarter to quarter--year to year
"""

#distribution plot for sales.

sns.displot(data=super_store,x='Sales',kde=True)
plt.title("Distribution of sales")

#barplot for sales and sub-category

plt.figure(figsize=(26,8))
sns.barplot(data=super_store,x='Sub-Category',y='Sales',hue='Category')
plt.title("Sub-Category vs Sales")

#pie chart for sales and category

category_sales = super_store.groupby('Category')['Sales'].sum()

plt.figure(figsize=(8, 8))
plt.pie(category_sales, labels=category_sales.index, autopct='%1.1f%%', startangle=90, colors=plt.cm.Set3.colors)
plt.title('Sales Distribution by Category')

# Extract months, quarters, and years
super_store['Month'] = super_store['Order Date'].dt.month
super_store['Quarter'] = super_store['Order Date'].dt.quarter

# Group by month and sum the sales
monthly_sales = super_store.groupby('Month')['Sales'].sum()

# Group by quarter and sum the sales
quarterly_sales = super_store.groupby('Quarter')['Sales'].sum()

# Group by year and sum the sales
yearly_sales = super_store.groupby('Order_Year')['Sales'].sum()

# Plotting line charts for sales variation over time
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.plot(monthly_sales, marker='o')
plt.title('Monthly Sales Variation')
plt.xlabel('Month')
plt.ylabel('Total Sales')

plt.subplot(1, 3, 2)
plt.plot(quarterly_sales, marker='+')
plt.title('Quarterly Sales Variation')
plt.xlabel('Quarter')
plt.ylabel('Total Sales')

plt.subplot(1, 3, 3)
plt.plot(yearly_sales, marker='*')
plt.title('Yearly Sales Variation')
plt.xlabel('Year')
plt.ylabel('Total Sales')

plt.tight_layout()
plt.show()

"""#Bivariate Analysis

##Correlation Matrix and HeatMap

1.Sales doesn' have a strong relation with dates --years,months,quarters.

2.Months and quarters  are strongly correlated.
"""

#correlation of the data

correlation=super_store.corr()

correlation

#heatmap for the correlation

sns.heatmap(correlation, annot=True, cmap='coolwarm', linewidths=.5)
plt.title("HeatMap for Correlation")

"""##Scatter Plot

1.There are maximum sales in Start, Middle and End of the Year.

2.Fourth quarter has more sales compared to other quarters.

3.Sales are increased from 2016-2018.
"""

#Scatter plot for months and sales

plt.figure(figsize=(26,8))
sns.scatterplot(data=super_store,x='Month',y="Sales")
plt.title('months vs sales')

#Scatter plot for sales and quarters

plt.figure(figsize=(26,8))
sns.scatterplot(data=super_store,x='Quarter',y="Sales")
plt.title('Quarter vs sales')

plt.figure(figsize=(26,8))
sns.scatterplot(data=super_store,x='Order_Year',y="Sales")
plt.title("Order Year vs Sales")

"""##Pair Plot

1.Sales are increasing from month to month.

2.For every year monthly sales are varying.
"""

#construct another dataset with columns--sales,year,month and quaters

super_store1=super_store[['Sales','Order_Year',	'Month',	'Quarter']]

#Pair plot for the data--super_store1

sns.pairplot(super_store1, diag_kind="hist")
plt.title("Pair plot for 'Sales','Order_Year',	'Month',	'Quarter'")

"""##Sales Trends

1.Sales trends are varying for different categories.

2.Copiers are sold much in 'South' Region.

3.'West' region has more sales after that 'South' has more sales and West has more Furniture sales compared with technology sales.
"""

sns.lineplot(data=super_store,x='Category',y='Sales',hue='Region')
plt.title("Category vs Sales via Region")

plt.figure(figsize=(26,8))
sns.lineplot(data=super_store,x='Sub-Category',y='Sales',hue='Region')
plt.title("Sub-Category vs Sales via Region")

sns.barplot(data=super_store,x='Region',y='Sales')
plt.title("Region wise Sales")

sales_by_region = super_store.groupby(['Region', 'Category'])['Sales'].sum().unstack()

sales_by_region.plot(kind='bar', stacked=True, color=['red', 'skyblue', 'green'])
plt.title("Region wise Sales via Category")

"""##Segment,Ship Mode and Sales

1.Corporate has more sales compared with consumer and home office.

2.Standard class has more sales than first class, second class and same day.

3.Corporate segment uses shipping mode to ship the orders than other two segments.

"""

sns.lineplot(data=super_store,x='Segment',y='Sales')
plt.title("Segment Vs Sales")

sns.barplot(data=super_store,x='Segment',y='Sales')
plt.title("Segment wise Sales")

sns.scatterplot(data=super_store,x='Ship Mode',y='Sales')
plt.title("Ship mode vs sales")

sns.lineplot(data=super_store,x='Segment',y='Ship Mode')
plt.title("Segment vs ship mode")

sns.catplot(data=super_store,x='Ship Mode',y='Sales',color='Green')
plt.title("Ship Mode vs Sales")

"""##Sub-Category and Sales

1.Copiers, Machimes and tables are highly sold sub-categories in the super store.

2.Fasteners and labels are not havig good sales.
"""

#bar plot for sub category and sales

plt.figure(figsize=(26,8))
sns.barplot(data=super_store,x='Sub-Category',y='Sales')
plt.title("Sub-Category vs Sales")

plt.figure(figsize=(26,8))
sns.lineplot(data=super_store,x='Sub-Category',y='Sales')
plt.title("Sub-Category wise sales")

"""##Region Wise Sales

1.Office Supplies Category has less sales in every region compared with Furniture and Technology.

2.But Office sales produces good profit than Technology.

"""

#region wise product sales

region_product_sales = super_store.groupby(['Region', 'Category'])['Sales'].sum().unstack()
plt.figure(figsize=(12, 8))
region_product_sales.plot(kind='bar', stacked=True, colormap='viridis')
plt.title('Region-wise Product Sales')
plt.xlabel('Region')
plt.ylabel('Total Sales')
plt.legend(title='Product Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Draw a nested barplot by Region and Sales
g = sns.catplot(
    data=super_store, kind="bar",
    x="Region", y="Sales", hue="Category",
    alpha=.6, height=6
)
plt.title('Region Vs Sales')
g.despine(left=True)
g.set_axis_labels("", "Sales")
g.legend.set_title("")

"""##Category Sales Over Region

1.District of Columbia has more Technology sales.

2.North Dakota has more Furniture Sales.

3.Vermont has more office supplies sales compared with other state Office Supplies sales.
"""

#Bar plot for category and sales for each region.

sns.barplot(data=super_store,x='Category',y='Sales',hue='Region')

#Bar plot for State and sales

plt.figure(figsize=(26,10))
sns.barplot(data=super_store,x='State',y='Sales',hue='Category')
plt.title("State vs Sales")
plt.xlabel("State")
plt.ylabel("Sales")
plt.xticks(rotation=45)